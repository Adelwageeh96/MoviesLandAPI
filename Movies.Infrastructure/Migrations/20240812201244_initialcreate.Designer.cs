// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Infrastructure.Data;

#nullable disable

namespace Movies.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240812201244_initialcreate")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Movies.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Movies.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Adult")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("longtext");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("longtext");

                    b.Property<string>("ImdbId")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Overview")
                        .HasColumnType("longtext");

                    b.Property<double?>("Popularity")
                        .HasColumnType("double");

                    b.Property<string>("PosterPath")
                        .HasColumnType("longtext");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("longtext");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Tagline")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Video")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("double");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompanies");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieProductionCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso31661")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Iso31661");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieProductionCountries");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieSpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso6391")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Iso6391");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieSpokenLanguages");
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LogoPath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCountry", b =>
                {
                    b.Property<string>("Iso31661")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Iso31661");

                    b.ToTable("ProductionCountries");
                });

            modelBuilder.Entity("Movies.Domain.Entities.SpokenLanguage", b =>
                {
                    b.Property<string>("Iso6391")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Iso6391");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieProductionCompany", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieProductionCountry", b =>
                {
                    b.HasOne("Movies.Domain.Entities.ProductionCountry", "ProductionCountry")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("Iso31661");

                    b.HasOne("Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCountry");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieSpokenLanguage", b =>
                {
                    b.HasOne("Movies.Domain.Entities.SpokenLanguage", "SpokenLanguage")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("Iso6391");

                    b.HasOne("Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("SpokenLanguage");
                });

            modelBuilder.Entity("Movies.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Movies.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("MovieProductionCompanies");

                    b.Navigation("MovieProductionCountries");

                    b.Navigation("MovieSpokenLanguages");
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCountry", b =>
                {
                    b.Navigation("MovieProductionCountries");
                });

            modelBuilder.Entity("Movies.Domain.Entities.SpokenLanguage", b =>
                {
                    b.Navigation("MovieSpokenLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
